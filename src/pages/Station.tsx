import { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import Layout from '@/components/Layout';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import StationHeader from '@/components/station/StationHeader';
import StationTabs from '@/components/station/StationTabs';
import { useWebSocket } from '@/hooks/useWebSocket';
import { wsService } from '@/services/websocket';
import { StationData } from '@/types/websocket';

interface ChargingStation {
  id: string;
  name: string;
  location: string;
  status: 'available' | 'charging' | 'error' | 'offline';
  connectors: Connector[];
  totalSessions: number;
  lastActivity: string;
  coordinates: [number, number];
  manufacturer: string;
  serialNumber: string;
  ocppId: string;
}

interface Connector {
  id: string;
  type: string;
  status: 'available' | 'charging' | 'error';
  power: string;
  currentSession?: {
    startTime: string;
    energy: number;
    cost: number;
  };
}

interface LogEntry {
  id: string;
  timestamp: string;
  type: 'request' | 'response' | 'error' | 'info';
  message: string;
}

const mockStations: ChargingStation[] = [
  {
    id: '1',
    name: '–≠–ó–° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
    location: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15',
    status: 'available',
    coordinates: [55.7558, 37.6176],
    totalSessions: 145,
    lastActivity: '2 –º–∏–Ω –Ω–∞–∑–∞–¥',
    manufacturer: 'Promenergo',
    serialNumber: '00053',
    ocppId: 'EDK6QDT0J59EK69A2WETY',
    connectors: [
      { id: '1', type: 'CCS Combo 2', status: 'available', power: '120 –∫–í—Ç' },
      { id: '2', type: 'GB/T DC', status: 'available', power: '120 –∫–í—Ç' },
      { id: '3', type: 'CHAdeMO', status: 'available', power: '90 –∫–í—Ç' }
    ]
  },
  {
    id: '2', 
    name: '–≠–ó–° –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
    location: '–¢–¶ –ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å',
    status: 'charging',
    coordinates: [55.7387, 37.6032],
    totalSessions: 89,
    lastActivity: '15 –º–∏–Ω –Ω–∞–∑–∞–¥',
    manufacturer: 'ChargePoint',
    serialNumber: '00042',
    ocppId: 'TCP2QDT0J59EK69A2WETY',
    connectors: [
      { id: '1', type: 'Type 2', status: 'charging', power: '22 –∫–í—Ç', currentSession: { startTime: '14:30', energy: 12.5, cost: 450 } },
      { id: '2', type: 'CHAdeMO', status: 'available', power: '50 –∫–í—Ç' }
    ]
  },
  {
    id: '3',
    name: '–≠–ó–° –ü–∞—Ä–∫–æ–≤–∞—è',
    location: '–ü–∞—Ä–∫ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
    status: 'error',
    coordinates: [55.7942, 37.6816], 
    totalSessions: 203,
    lastActivity: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
    manufacturer: 'ABB',
    serialNumber: '00078',
    ocppId: 'ABB6QDT0J59EK69A2WETY',
    connectors: [
      { id: '1', type: 'Type 2', status: 'error', power: '22 –∫–í—Ç' },
      { id: '2', type: 'CCS', status: 'error', power: '50 –∫–í—Ç' }
    ]
  }
];

const mockLogs: LogEntry[] = [
  { id: '1', timestamp: '16:01:20 25.09.2025', type: 'request', message: 'Heartbeat.req\n{}' },
  { id: '2', timestamp: '16:01:20 25.09.2025', type: 'response', message: 'Heartbeat.res\n{"currentTime":"2025-09-25T13:01:20.275Z"}' },
  { id: '3', timestamp: '15:56:19 25.09.2025', type: 'response', message: 'Heartbeat.res\n{"currentTime":"2025-09-25T12:56:19.935Z"}' },
  { id: '4', timestamp: '15:56:19 25.09.2025', type: 'request', message: 'Heartbeat.req\n{}' },
  { id: '5', timestamp: '15:51:19 25.09.2025', type: 'response', message: 'Heartbeat.res\n{"currentTime":"2025-09-25T12:51:19.716Z"}' },
  { id: '6', timestamp: '15:51:19 25.09.2025', type: 'request', message: 'Heartbeat.req\n{}' },
];

export default function Station() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('management');
  const [station, setStation] = useState<StationData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const { isConnected: connected } = useWebSocket();

  useEffect(() => {
    let isMounted = true;

    const loadStation = async () => {
      if (!connected || !wsService || !id) {
        return;
      }

      try {
        setLoading(true);
        setError(null);
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω—Ü–∏—é —Å ID:', id);
        console.log('üîå WebSocket connected:', connected);
        console.log('üîå WebSocket state:', wsService.isConnected());
        
        const stationData = await wsService.getStationDetail(id);
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:', stationData);
        
        if (isMounted) {
          if (stationData) {
            console.log('‚úÖ –°—Ç–∞–Ω—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stationData);
            setStation(stationData);
          } else {
            console.log('‚ùå –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            setError(`–°—Ç–∞–Ω—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏:', err);
        if (isMounted) {
          setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏');
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    if (connected) {
      loadStation();
    }

    return () => {
      isMounted = false;
    };
  }, [connected, wsService, id]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Icon name="Loader2" size={48} className="text-blue-500 mx-auto mb-4 animate-spin" />
          <h1 className="text-2xl font-bold mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏...</h1>
          <p className="text-gray-500">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–Ω—Ü–∏–∏ {id}</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
  if (error || !station) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Icon name="AlertCircle" size={48} className="text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold mb-2">–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <p className="text-gray-500 mb-4">
            {error || `–°—Ç–∞–Ω—Ü–∏—è —Å ID ${id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`}
          </p>
          <Link to="/">
            <Button>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É</Button>
          </Link>
        </div>
      </div>
    );
  }

  const handleAction = (action: string) => {
    console.log(`–î–µ–π—Å—Ç–≤–∏–µ: ${action} –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${station.id}`);
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebSocket –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const stationForComponent = {
    id: station.id,
    name: station.name,
    location: station.address || station.city,
    status: station.status as 'available' | 'charging' | 'error' | 'offline',
    coordinates: [station.coordinates?.lat || 0, station.coordinates?.lng || 0] as [number, number],
    totalSessions: station.totalSessions || 0,
    lastActivity: station.lastUpdate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    manufacturer: station.manufacturer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    serialNumber: station.serialNumber || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    ocppId: station.id,
    connectors: (station.connectors || []).map((conn, index) => ({
      id: String(index + 1),
      type: conn.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      status: conn.status as 'available' | 'charging' | 'error',
      power: `${conn.power || 0} –∫–í—Ç`
    }))
  };

  return (
    <Layout>
      <StationHeader station={stationForComponent} />

      {/* –û–¥–Ω–æ–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –ª—ç–π–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ */}
      <div className="max-w-7xl mx-auto">
        <StationTabs 
          station={stationForComponent}
          mockLogs={mockLogs}
          activeTab={activeTab}
          onTabChange={setActiveTab}
          onAction={handleAction}
        />
      </div>
    </Layout>
  );
}
import { useState, useEffect } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import Icon from '@/components/ui/icon';
import Map from '@/components/Map';
import Layout from '@/components/Layout';
import WebSocketStatus from '@/components/WebSocketStatus';
import { useWebSocket, useStations } from '@/hooks/useWebSocket';

interface ChargingStation {
  id: string;
  name: string;
  location: string;
  status: 'available' | 'charging' | 'error' | 'offline';
  connectors: Connector[];
  totalSessions: number;
  lastActivity: string;
  coordinates: [number, number];
}

interface Connector {
  id: string;
  type: string;
  status: 'available' | 'charging' | 'error';
  power: string;
  currentSession?: {
    startTime: string;
    energy: number;
    cost: number;
  };
}

const mockStations: ChargingStation[] = [
  {
    id: '1',
    name: '–≠–ó–° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è',
    location: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15',
    status: 'charging',
    coordinates: [55.7558, 37.6176],
    totalSessions: 145,
    lastActivity: '2 –º–∏–Ω –Ω–∞–∑–∞–¥',
    connectors: [
      { id: 'c1', type: 'Type 2', status: 'charging', power: '22 –∫–í—Ç', currentSession: { startTime: '14:30', energy: 12.5, cost: 450 } },
      { id: 'c2', type: 'CCS', status: 'available', power: '50 –∫–í—Ç' }
    ]
  },
  {
    id: '2',
    name: '–≠–ó–° –°–µ–≤–µ—Ä–Ω–∞—è',
    location: '–ø—Ä. –ú–∏—Ä–∞, 45',
    status: 'available',
    coordinates: [55.7665, 37.6177],
    totalSessions: 87,
    lastActivity: '15 –º–∏–Ω –Ω–∞–∑–∞–¥',
    connectors: [
      { id: 'c3', type: 'Type 2', status: 'available', power: '22 –∫–í—Ç' },
      { id: 'c4', type: 'CHAdeMO', status: 'available', power: '50 –∫–í—Ç' }
    ]
  },
  {
    id: '3',
    name: '–≠–ó–° –Æ–∂–Ω–∞—è',
    location: '—É–ª. –ü–æ–±–µ–¥—ã, 12',
    status: 'error',
    coordinates: [55.7430, 37.6156],
    totalSessions: 203,
    lastActivity: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
    connectors: [
      { id: 'c5', type: 'Type 2', status: 'error', power: '22 –∫–í—Ç' },
      { id: 'c6', type: 'CCS', status: 'available', power: '150 –∫–í—Ç' }
    ]
  }
];

const getStatusLabel = (status: string) => {
  switch (status) {
    case 'available': return '–î–æ—Å—Ç—É–ø–Ω–∞';
    case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
    case 'charging': return '–ó–∞—Ä—è–¥–∫–∞';
    case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
    case 'maintenance': return '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
    case 'error': return '–û—à–∏–±–∫–∞';
    case 'offline': return '–û—Ñ–ª–∞–π–Ω';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
};

export default function Index() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  
  // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
  const { isConnected, isConnecting, error } = useWebSocket();
  const { stations, loading, loadStations } = useStations();

  const currentTab = searchParams.get('tab') || 'map';

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ø–∏—Å–æ–∫
  useEffect(() => {
    if (currentTab === 'list' && isConnected && stations.length === 0) {
      console.log('üîÑ Loading stations for list view...');
      loadStations();
    }
  }, [currentTab, isConnected, stations.length, loadStations]);

  // –î–ª—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –¥–ª—è –∫–∞—Ä—Ç—ã - –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const displayStations = currentTab === 'list' ? stations : mockStations;
  
  const filteredStations = displayStations.filter(station =>
    station.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    station.location?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    station.city?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleStationClick = (stationId: string) => {
    navigate(`/station/${stationId}`);
  };

  return (
    <Layout>
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                {currentTab === 'map' ? '–ö–∞—Ä—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–π' : '–°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π'}
              </h1>
              <p className="text-sm text-gray-500">
                –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä—è–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏
              </p>
            </div>
            <div className="flex items-center gap-4">
              <WebSocketStatus />
              {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => loadStations()}
                disabled={!isConnected || loading}
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
              </Button>
              <Badge variant="outline" className="gap-1">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                –û–Ω–ª–∞–π–Ω: 18
              </Badge>
              <Badge variant="outline" className="gap-1">
                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                –û—à–∏–±–∫–∏: 3
              </Badge>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 lg:px-8 py-6">
        <div className="space-y-6">

        {/* Map view */}
        {currentTab === 'map' && (
          <div className="space-y-4">
            <Card className="h-[600px] relative">
              <CardContent className="p-0 h-full">
                <Map 
                  stations={mockStations} 
                  onStationClick={handleStationClick}
                />
              </CardContent>
            </Card>

            {/* Legend */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">–õ–µ–≥–µ–Ω–¥–∞</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-4">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-station-available rounded-full"></div>
                    <span className="text-sm">–î–æ—Å—Ç—É–ø–Ω–∞</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-station-charging rounded-full"></div>
                    <span className="text-sm">–ó–∞—Ä—è–¥–∫–∞</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-station-error rounded-full"></div>
                    <span className="text-sm">–û—à–∏–±–∫–∞</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-station-offline rounded-full"></div>
                    <span className="text-sm">–û—Ñ–ª–∞–π–Ω</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* List view */}
        {currentTab === 'list' && (
          <div className="space-y-4">
            {/* Search */}
            <div className="flex gap-4">
              <div className="relative flex-1">
                <Icon name="Search" size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            {/* –û—à–∏–±–∫–∏ WebSocket */}
            {error && (
              <Card className="border-red-200 bg-red-50">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-2 text-red-600">
                    <Icon name="AlertCircle" size={16} />
                    <span className="text-sm">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error}</span>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Stations Table */}
            <Card>
              <CardHeader>
                <CardTitle>–ó–∞—Ä—è–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ</TableHead>
                      <TableHead>–ì–æ—Ä–æ–¥</TableHead>
                      <TableHead>–í–ª–∞–¥–µ–ª–µ—Ü</TableHead>
                      <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                      <TableHead>–≠–Ω–µ—Ä–≥–∏—è</TableHead>
                      <TableHead>–ú–æ—â–Ω–æ—Å—Ç—å</TableHead>
                      <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading && (
                      <TableRow>
                        <TableCell colSpan={7} className="text-center py-8">
                          <div className="flex items-center justify-center gap-2">
                            <Icon name="Loader2" className="animate-spin" size={20} />
                            –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...
                          </div>
                        </TableCell>
                      </TableRow>
                    )}
                    {!loading && filteredStations.length === 0 && (
                      <TableRow>
                        <TableCell colSpan={7} className="text-center py-8 text-gray-500">
                          {currentTab === 'list' && !isConnected ? '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                        </TableCell>
                      </TableRow>
                    )}
                    {!loading && filteredStations.map((station) => (
                      <TableRow key={station.id}>
                        <TableCell className="font-medium">{station.name}</TableCell>
                        <TableCell>{currentTab === 'list' ? station.city : station.location}</TableCell>
                        <TableCell>{currentTab === 'list' ? station.owner : '-'}</TableCell>
                        <TableCell>
                          <Badge 
                            variant={station.status === 'error' ? 'destructive' : 'default'}
                            className={
                              station.status === 'available' || station.status === 'active' ? 'bg-green-100 text-green-800 hover:bg-green-200' :
                              station.status === 'charging' || station.status === 'inactive' ? 'bg-orange-100 text-orange-800 hover:bg-orange-200' :
                              station.status === 'maintenance' ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200' :
                              ''
                            }
                          >
                            {getStatusLabel(station.status)}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {currentTab === 'list' ? 
                            `${station.totalEnergy?.toLocaleString() || 0} –∫–í—Ç‚ãÖ—á` : 
                            station.connectors?.length || 0
                          }
                        </TableCell>
                        <TableCell>
                          {currentTab === 'list' ? 
                            `${station.currentPower || 0} –∫–í—Ç` : 
                            station.totalSessions || 0
                          }
                        </TableCell>
                        <TableCell>
                          <Link to={`/station/${station.id}`}>
                            <Button variant="outline" size="sm">
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </Button>
                          </Link>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </div>
        )}

        </div>
      </div>
    </Layout>
  );
}